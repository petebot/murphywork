{
  "version": 3,
  "sources": ["../../@portabletext/toolkit/src/asserters.ts", "../../@portabletext/toolkit/src/sortMarksByOccurences.ts", "../../@portabletext/toolkit/src/buildMarksTree.ts", "../../@portabletext/toolkit/src/nestLists.ts", "../../@portabletext/toolkit/src/spanToPlainText.ts", "../../@portabletext/toolkit/src/toPlainText.ts", "../../@portabletext/toolkit/src/types.ts", "../../@portabletext/svelte/dist/assertBlockKey.js", "../../@portabletext/svelte/dist/defaultComponents/DefaultMark.svelte", "../../@portabletext/svelte/dist/defaultComponents/DefaultLink.svelte", "../../@portabletext/svelte/dist/defaultComponents/DefaultBlock.svelte", "../../@portabletext/svelte/dist/defaultComponents/DefaultList.svelte", "../../@portabletext/svelte/dist/defaultComponents/DefaultListItem.svelte", "../../@portabletext/svelte/dist/defaultComponents/DefaultHardBreak.svelte", "../../@portabletext/svelte/dist/defaultComponents/UnknownType.svelte", "../../@portabletext/svelte/dist/defaultComponents/defaultComponents.js", "../../@portabletext/svelte/dist/defaultComponents/mergeComponents.js", "../../@portabletext/svelte/dist/renderers/RenderBlock.svelte", "../../@portabletext/svelte/dist/renderers/RenderCustomBlock.svelte", "../../@portabletext/svelte/dist/renderers/RenderList.svelte", "../../@portabletext/svelte/dist/renderers/RenderListItem.svelte", "../../@portabletext/svelte/dist/renderers/RenderSpan.svelte", "../../@portabletext/svelte/dist/renderers/RenderText.svelte", "../../@portabletext/svelte/dist/RenderNode.svelte", "../../@portabletext/svelte/dist/warnings.js", "../../@portabletext/svelte/dist/PortableText.svelte"],
  "sourcesContent": ["import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextListItemBlock,\n  PortableTextSpan,\n  TypedObject,\n} from '@portabletext/types'\n\nimport type {ToolkitNestedPortableTextSpan, ToolkitPortableTextList, ToolkitTextNode} from './types'\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text span.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text span, otherwise false\n */\nexport function isPortableTextSpan(\n  node: ArbitraryTypedObject | PortableTextSpan,\n): node is PortableTextSpan {\n  return (\n    node._type === 'span' &&\n    'text' in node &&\n    typeof node.text === 'string' &&\n    (typeof node.marks === 'undefined' ||\n      (Array.isArray(node.marks) && node.marks.every((mark) => typeof mark === 'string')))\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted Portable Text block.\n *\n * @param node - Node to check\n * @returns True if valid Portable Text block, otherwise false\n */\nexport function isPortableTextBlock(\n  node: PortableTextBlock | TypedObject,\n): node is PortableTextBlock {\n  return (\n    // A block doesn't _have_ to be named 'block' - to differentiate between\n    // allowed child types and marks, one might name them differently\n    typeof node._type === 'string' &&\n    // Toolkit-types like nested spans are @-prefixed\n    node._type[0] !== '@' &&\n    // `markDefs` isn't _required_ per say, but if it's there, it needs to be an array\n    (!('markDefs' in node) ||\n      !node.markDefs ||\n      (Array.isArray(node.markDefs) &&\n        // Every mark definition needs to have an `_key` to be mappable in child spans\n        node.markDefs.every((def) => typeof def._key === 'string'))) &&\n    // `children` is required and needs to be an array\n    'children' in node &&\n    Array.isArray(node.children) &&\n    // All children are objects with `_type` (usually spans, but can contain other stuff)\n    node.children.every((child) => typeof child === 'object' && '_type' in child)\n  )\n}\n\n/**\n * Strict check to determine if node is a correctly formatted portable list item block.\n *\n * @param block - Block to check\n * @returns True if valid Portable Text list item block, otherwise false\n */\nexport function isPortableTextListItemBlock(\n  block: PortableTextBlock | TypedObject,\n): block is PortableTextListItemBlock {\n  return (\n    isPortableTextBlock(block) &&\n    'listItem' in block &&\n    typeof block.listItem === 'string' &&\n    (typeof block.level === 'undefined' || typeof block.level === 'number')\n  )\n}\n\n/**\n * Loose check to determine if block is a toolkit list node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param block - Block to check\n * @returns True if toolkit list, otherwise false\n */\nexport function isPortableTextToolkitList(\n  block: TypedObject | ToolkitPortableTextList,\n): block is ToolkitPortableTextList {\n  return block._type === '@list'\n}\n\n/**\n * Loose check to determine if span is a toolkit span node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param span - Span to check\n * @returns True if toolkit span, otherwise false\n */\nexport function isPortableTextToolkitSpan(\n  span: TypedObject | ToolkitNestedPortableTextSpan,\n): span is ToolkitNestedPortableTextSpan {\n  return span._type === '@span'\n}\n\n/**\n * Loose check to determine if node is a toolkit text node.\n * Only checks `_type`, assumes correct structure.\n *\n * @param node - Node to check\n * @returns True if toolkit text node, otherwise false\n */\nexport function isPortableTextToolkitTextNode(\n  node: TypedObject | ToolkitTextNode,\n): node is ToolkitTextNode {\n  return node._type === '@text'\n}\n", "import type {PortableTextSpan, TypedObject} from '@portabletext/types'\n\nimport {isPortableTextSpan} from './asserters'\n\nconst knownDecorators = ['strong', 'em', 'code', 'underline', 'strike-through']\n\n/**\n * Figures out the optimal order of marks, in order to minimize the amount of\n * nesting/repeated elements in environments such as HTML. For instance, a naive\n * implementation might render something like:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded text</strong>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a> and some bolded text\n * </strong>\n * ```\n *\n * This is particularly necessary for cases like links, where you don't want multiple\n * individual links for different segments of the link text, even if parts of it are\n * bolded/italicized.\n *\n * This function is meant to be used like: `block.children.map(sortMarksByOccurences)`,\n * and is used internally in {@link buildMarksTree | `buildMarksTree()`}.\n *\n * The marks are sorted in the following order:\n *\n *  1. Marks that are shared amongst the most adjacent siblings\n *  2. Non-default marks (links, custom metadata)\n *  3. Decorators (bold, emphasis, code etc), in a predefined, preferred order\n *\n * @param span - The current span to sort\n * @param index - The index of the current span within the block\n * @param blockChildren - All children of the block being sorted\n * @returns Array of decorators and annotations, sorted by \"most adjacent siblings\"\n */\nexport function sortMarksByOccurences(\n  span: PortableTextSpan | TypedObject,\n  index: number,\n  blockChildren: (PortableTextSpan | TypedObject)[],\n): string[] {\n  if (!isPortableTextSpan(span) || !span.marks) {\n    return []\n  }\n\n  if (!span.marks.length) {\n    return []\n  }\n\n  // Slicing because we'll be sorting with `sort()`, which mutates\n  const marks = span.marks.slice()\n  const occurences: Record<string, number> = {}\n  marks.forEach((mark) => {\n    occurences[mark] = 1\n\n    for (let siblingIndex = index + 1; siblingIndex < blockChildren.length; siblingIndex++) {\n      const sibling = blockChildren[siblingIndex]\n\n      if (\n        sibling &&\n        isPortableTextSpan(sibling) &&\n        Array.isArray(sibling.marks) &&\n        sibling.marks.indexOf(mark) !== -1\n      ) {\n        occurences[mark]++\n      } else {\n        break\n      }\n    }\n  })\n\n  return marks.sort((markA, markB) => sortMarks(occurences, markA, markB))\n}\n\nfunction sortMarks<U extends string, T extends Record<U, number>>(\n  occurences: T,\n  markA: U,\n  markB: U,\n): number {\n  const aOccurences = occurences[markA]\n  const bOccurences = occurences[markB]\n\n  if (aOccurences !== bOccurences) {\n    return bOccurences - aOccurences\n  }\n\n  const aKnownPos = knownDecorators.indexOf(markA)\n  const bKnownPos = knownDecorators.indexOf(markB)\n\n  // Sort known decorators last\n  if (aKnownPos !== bKnownPos) {\n    return aKnownPos - bKnownPos\n  }\n\n  // Sort other marks simply by key\n  return markA.localeCompare(markB)\n}\n", "import type {\n  ArbitraryTypedObject,\n  PortableTextBlock,\n  PortableTextMarkDefinition,\n} from '@portabletext/types'\n\nimport {isPortableTextSpan} from './asserters'\nimport {sortMarksByOccurences} from './sortMarksByOccurences'\nimport type {ToolkitNestedPortableTextSpan, ToolkitTextNode} from './types'\n\n/**\n * Takes a Portable Text block and returns a nested tree of nodes optimized for rendering\n * in HTML-like environments where you want marks/annotations to be nested inside of eachother.\n * For instance, a naive span-by-span rendering might yield:\n *\n * ```html\n * <strong>This block contains </strong>\n * <strong><a href=\"https://some.url/\">a link</a></strong>\n * <strong> and some bolded and </strong>\n * <em><strong>italicized text</strong></em>\n * ```\n *\n * ...whereas an optimal order would be:\n *\n * ```html\n * <strong>\n *   This block contains <a href=\"https://some.url/\">a link</a>\n *   and some bolded and <em>italicized text</em>\n * </strong>\n * ```\n *\n * Note that since \"native\" Portable Text spans cannot be nested,\n * this function returns an array of \"toolkit specific\" types:\n * {@link ToolkitTextNode | `@text`} and {@link ToolkitNestedPortableTextSpan | `@span` }.\n *\n * The toolkit-specific type can hold both types, as well as any arbitrary inline objects,\n * creating an actual tree.\n *\n * @param block - The Portable Text block to create a tree of nodes from\n * @returns Array of (potentially) nested spans, text nodes and/or arbitrary inline objects\n */\nexport function buildMarksTree<M extends PortableTextMarkDefinition = PortableTextMarkDefinition>(\n  block: PortableTextBlock<M>,\n): (ToolkitNestedPortableTextSpan<M> | ToolkitTextNode | ArbitraryTypedObject)[] {\n  const {children, markDefs = []} = block\n  if (!children || !children.length) {\n    return []\n  }\n\n  const sortedMarks = children.map(sortMarksByOccurences)\n\n  const rootNode: ToolkitNestedPortableTextSpan<M> = {\n    _type: '@span',\n    children: [],\n    markType: '<unknown>',\n  }\n\n  let nodeStack: ToolkitNestedPortableTextSpan<M>[] = [rootNode]\n\n  for (let i = 0; i < children.length; i++) {\n    const span = children[i]\n    if (!span) {\n      continue\n    }\n\n    const marksNeeded = sortedMarks[i] || []\n    let pos = 1\n\n    // Start at position one. Root is always plain and should never be removed\n    if (nodeStack.length > 1) {\n      for (pos; pos < nodeStack.length; pos++) {\n        const mark = nodeStack[pos]?.markKey || ''\n        const index = marksNeeded.indexOf(mark)\n\n        if (index === -1) {\n          break\n        }\n\n        marksNeeded.splice(index, 1)\n      }\n    }\n\n    // Keep from beginning to first miss\n    nodeStack = nodeStack.slice(0, pos)\n\n    // Add needed nodes\n    let currentNode = nodeStack[nodeStack.length - 1]\n    if (!currentNode) {\n      continue\n    }\n\n    for (const markKey of marksNeeded) {\n      const markDef = markDefs.find((def) => def._key === markKey)\n      const markType = markDef ? markDef._type : markKey\n      const node: ToolkitNestedPortableTextSpan<M> = {\n        _type: '@span',\n        _key: span._key,\n        children: [],\n        markDef,\n        markType,\n        markKey,\n      }\n\n      currentNode.children.push(node)\n      nodeStack.push(node)\n      currentNode = node\n    }\n\n    // Split at newlines to make individual line chunks, but keep newline\n    // characters as individual elements in the array. We use these characters\n    // in the span serializer to trigger hard-break rendering\n    if (isPortableTextSpan(span)) {\n      const lines = span.text.split('\\n')\n      for (let line = lines.length; line-- > 1; ) {\n        lines.splice(line, 0, '\\n')\n      }\n\n      currentNode.children = currentNode.children.concat(\n        lines.map((text) => ({_type: '@text', text})),\n      )\n    } else {\n      // This is some other inline object, not a text span\n      currentNode.children = currentNode.children.concat(span)\n    }\n  }\n\n  return rootNode.children\n}\n", "import type {PortableTextBlock, PortableTextListItemBlock, TypedObject} from '@portabletext/types'\n\nimport {\n  isPortableTextListItemBlock,\n  isPortableTextSpan,\n  isPortableTextToolkitList,\n} from './asserters'\nimport type {\n  ToolkitListNestMode,\n  ToolkitPortableTextDirectList,\n  ToolkitPortableTextHtmlList,\n  ToolkitPortableTextList,\n  ToolkitPortableTextListItem,\n} from './types'\n\nexport type ToolkitNestListsOutputNode<T> =\n  | T\n  | ToolkitPortableTextHtmlList\n  | ToolkitPortableTextDirectList\n\n/**\n * Takes an array of blocks and returns an array of nodes optimized for rendering in HTML-like\n * environment, where lists are nested inside of eachother instead of appearing \"flat\" as in\n * native Portable Text data structures.\n *\n * Note that the list node is not a native Portable Text node type, and thus is represented\n * using the {@link ToolkitPortableTextList | `@list`} type name (`{_type: '@list'}`).\n *\n * The nesting can be configured in two modes:\n *\n * - `direct`: deeper list nodes will appear as a direct child of the parent list\n * - `html`, deeper list nodes will appear as a child of the last _list item_ in the parent list\n *\n * When using `direct`, all list nodes will be of type {@link ToolkitPortableTextDirectList},\n * while with `html` they will be of type {@link ToolkitPortableTextHtmlList}\n *\n * These modes are available as {@link LIST_NEST_MODE_HTML} and {@link LIST_NEST_MODE_DIRECT}.\n *\n * @param blocks - Array of Portable Text blocks and other arbitrary types\n * @param mode - Mode to use for nesting, `direct` or `html`\n * @returns Array of potentially nested nodes optimized for rendering\n */\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct',\n): (T | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'html',\n): (T | ToolkitPortableTextHtmlList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: 'direct' | 'html',\n): (T | ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList)[]\nexport function nestLists<T extends TypedObject = PortableTextBlock | TypedObject>(\n  blocks: T[],\n  mode: ToolkitListNestMode,\n): ToolkitNestListsOutputNode<T>[] {\n  const tree: ToolkitNestListsOutputNode<T>[] = []\n  let currentList: ToolkitPortableTextList | undefined\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i]\n    if (!block) {\n      continue\n    }\n\n    if (!isPortableTextListItemBlock(block)) {\n      tree.push(block)\n      currentList = undefined\n      continue\n    }\n\n    // Start of a new list?\n    if (!currentList) {\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // New list item within same list?\n    if (blockMatchesList(block, currentList)) {\n      currentList.children.push(block)\n      continue\n    }\n\n    // Different list props, are we going deeper?\n    if ((block.level || 1) > currentList.level) {\n      const newList = listFromBlock(block, i, mode)\n\n      if (mode === 'html') {\n        // Because HTML is kinda weird, nested lists needs to be nested within list items.\n        // So while you would think that we could populate the parent list with a new sub-list,\n        // we actually have to target the last list element (child) of the parent.\n        // However, at this point we need to be very careful - simply pushing to the list of children\n        // will mutate the input, and we don't want to blindly clone the entire tree.\n\n        // Clone the last child while adding our new list as the last child of it\n        const lastListItem = currentList.children[\n          currentList.children.length - 1\n        ] as ToolkitPortableTextListItem\n\n        const newLastChild: ToolkitPortableTextListItem = {\n          ...lastListItem,\n          children: [...lastListItem.children, newList],\n        }\n\n        // Swap the last child\n        currentList.children[currentList.children.length - 1] = newLastChild\n      } else {\n        ;(currentList as ToolkitPortableTextDirectList).children.push(\n          newList as ToolkitPortableTextDirectList,\n        )\n      }\n\n      // Set the newly created, deeper list as the current\n      currentList = newList\n      continue\n    }\n\n    // Different list props, are we going back up the tree?\n    if ((block.level || 1) < currentList.level) {\n      // Current list has ended, and we need to hook up with a parent of the same level and type\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, block)\n      if (match) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      }\n\n      // Similar parent can't be found, assume new list\n      currentList = listFromBlock(block, i, mode)\n      tree.push(currentList)\n      continue\n    }\n\n    // Different list props, different list style?\n    if (block.listItem !== currentList.listItem) {\n      const matchingBranch = tree[tree.length - 1]\n      const match = matchingBranch && findListMatching(matchingBranch, {level: block.level || 1})\n      if (match && match.listItem === block.listItem) {\n        currentList = match\n        currentList.children.push(block)\n        continue\n      } else {\n        currentList = listFromBlock(block, i, mode)\n        tree.push(currentList)\n        continue\n      }\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn('Unknown state encountered for block', block)\n    tree.push(block)\n  }\n\n  return tree\n}\n\nfunction blockMatchesList(block: PortableTextBlock, list: ToolkitPortableTextList) {\n  return (block.level || 1) === list.level && block.listItem === list.listItem\n}\n\nfunction listFromBlock(\n  block: PortableTextListItemBlock,\n  index: number,\n  mode: ToolkitListNestMode,\n): ToolkitPortableTextList {\n  return {\n    _type: '@list',\n    _key: `${block._key || `${index}`}-parent`,\n    mode,\n    level: block.level || 1,\n    listItem: block.listItem,\n    children: [block],\n  }\n}\n\nfunction findListMatching<T extends TypedObject | PortableTextBlock>(\n  rootNode: T,\n  matching: Partial<PortableTextListItemBlock>,\n): ToolkitPortableTextList | undefined {\n  const level = matching.level || 1\n  const style = matching.listItem || 'normal'\n  const filterOnType = typeof matching.listItem === 'string'\n  if (\n    isPortableTextToolkitList(rootNode) &&\n    (rootNode.level || 1) === level &&\n    filterOnType &&\n    (rootNode.listItem || 'normal') === style\n  ) {\n    return rootNode\n  }\n\n  if (!('children' in rootNode)) {\n    return undefined\n  }\n\n  const node = rootNode.children[rootNode.children.length - 1]\n  return node && !isPortableTextSpan(node) ? findListMatching(node, matching) : undefined\n}\n", "import {isPortableTextToolkitSpan, isPortableTextToolkitTextNode} from './asserters'\nimport type {ToolkitNestedPortableTextSpan} from './types'\n\n/**\n * Returns the plain-text representation of a\n * {@link ToolkitNestedPortableTextSpan | toolkit-specific Portable Text span}.\n *\n * Useful if you have a subset of nested nodes and want the text from just those,\n * instead of for the entire Portable Text block.\n *\n * @param span - Span node to get text from (Portable Text toolkit specific type)\n * @returns The plain-text version of the span\n */\nexport function spanToPlainText(span: ToolkitNestedPortableTextSpan): string {\n  let text = ''\n  span.children.forEach((current) => {\n    if (isPortableTextToolkitTextNode(current)) {\n      text += current.text\n    } else if (isPortableTextToolkitSpan(current)) {\n      text += spanToPlainText(current)\n    }\n  })\n  return text\n}\n", "import type {ArbitraryTypedObject, PortableTextBlock} from '@portabletext/types'\n\nimport {isPortableTextBlock, isPortableTextSpan} from './asserters'\n\nconst leadingSpace = /^\\s/\nconst trailingSpace = /^\\s/\n\n/**\n * Takes a Portable Text block (or an array of them) and returns the text value\n * of all the Portable Text span nodes. Adds whitespace when encountering inline,\n * non-span nodes to ensure text flow is optimal.\n *\n * Note that this only accounts for regular Portable Text blocks - any text inside\n * custom content types are not included in the output.\n *\n * @param block - Single block or an array of blocks to extract text from\n * @returns The plain-text content of the blocks\n */\nexport function toPlainText(\n  block: PortableTextBlock | ArbitraryTypedObject[] | PortableTextBlock[],\n): string {\n  const blocks = Array.isArray(block) ? block : [block]\n  let text = ''\n\n  blocks.forEach((current, index) => {\n    if (!isPortableTextBlock(current)) {\n      return\n    }\n\n    let pad = false\n    current.children.forEach((span) => {\n      if (isPortableTextSpan(span)) {\n        // If the previous element was a non-span, and we have no natural whitespace\n        // between the previous and the next span, insert it to give the spans some\n        // room to breathe. However, don't do so if this is the first span.\n        text += pad && text && !trailingSpace.test(text) && !leadingSpace.test(span.text) ? ' ' : ''\n        text += span.text\n        pad = false\n      } else {\n        pad = true\n      }\n    })\n\n    if (index !== blocks.length - 1) {\n      text += '\\n\\n'\n    }\n  })\n\n  return text\n}\n", "import type {\n  ArbitraryTypedObject,\n  PortableTextListItemBlock,\n  PortableTextMarkDefinition,\n  PortableTextSpan,\n} from '@portabletext/types'\n\n/**\n * List nesting mode for HTML, see the {@link nestLists | `nestLists()` function}\n */\nexport const LIST_NEST_MODE_HTML = 'html'\n\n/**\n * List nesting mode for direct, nested lists, see the {@link nestLists | `nestLists()` function}\n */\nexport const LIST_NEST_MODE_DIRECT = 'direct'\n\n/**\n * List nesting mode, see the {@link nestLists | `nestLists()` function}\n */\nexport type ToolkitListNestMode = 'html' | 'direct'\n\n/**\n * Toolkit-specific type representing a nested list\n *\n * See the `nestLists()` function for more info\n */\nexport type ToolkitPortableTextList = ToolkitPortableTextHtmlList | ToolkitPortableTextDirectList\n\n/**\n * Toolkit-specific type representing a nested list in HTML mode, where deeper lists are nested\n * inside of the _list items_, eg `<ul><li>Some text<ul><li>Deeper</li></ul></li></ul>`\n */\nexport interface ToolkitPortableTextHtmlList {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@list'\n\n  /**\n   * Unique key for this list (within its parent)\n   */\n  _key: string\n\n  /**\n   * List mode, signaling that list nodes will appear as children of the _list items_\n   */\n  mode: 'html'\n\n  /**\n   * Level/depth of this list node (starts at `1`)\n   */\n  level: number\n\n  /**\n   * Style of this list item (`bullet`, `number` are common values, but can be customized)\n   */\n  listItem: string\n\n  /**\n   * Child nodes of this list - toolkit-specific list items which can themselves hold deeper lists\n   */\n  children: ToolkitPortableTextListItem[]\n}\n\n/**\n * Toolkit-specific type representing a nested list in \"direct\" mode, where deeper lists are nested\n * inside of the lists children, alongside other blocks.\n */\nexport interface ToolkitPortableTextDirectList {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@list'\n\n  /**\n   * Unique key for this list (within its parent)\n   */\n  _key: string\n\n  /**\n   * List mode, signaling that list nodes can appear as direct children\n   */\n  mode: 'direct'\n\n  /**\n   * Level/depth of this list node (starts at `1`)\n   */\n  level: number\n\n  /**\n   * Style of this list item (`bullet`, `number` are common values, but can be customized)\n   */\n  listItem: string\n\n  /**\n   * Child nodes of this list - either portable text list items, or another, deeper list\n   */\n  children: (PortableTextListItemBlock | ToolkitPortableTextDirectList)[]\n}\n\n/**\n * Toolkit-specific type representing a list item block, but where the children can be another list\n */\nexport interface ToolkitPortableTextListItem\n  extends PortableTextListItemBlock<\n    PortableTextMarkDefinition,\n    PortableTextSpan | ToolkitPortableTextList\n  > {}\n\n/**\n * Toolkit-specific type representing a text node, used when nesting spans.\n *\n * See the {@link buildMarksTree | `buildMarksTree()` function}\n */\nexport interface ToolkitTextNode {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@text'\n\n  /**\n   * The actual string value of the text node\n   */\n  text: string\n}\n\n/**\n * Toolkit-specific type representing a portable text span that can hold other spans.\n * In this type, each span only has a single mark, instead of an array of them.\n */\nexport interface ToolkitNestedPortableTextSpan<\n  M extends PortableTextMarkDefinition = PortableTextMarkDefinition,\n> {\n  /**\n   * Type name, prefixed with `@` to signal that this is a toolkit-specific node.\n   */\n  _type: '@span'\n\n  /**\n   * Unique key for this span\n   */\n  _key?: string\n\n  /**\n   * Holds the value (definition) of the mark in the case of annotations.\n   * `undefined` if the mark is a decorator (strong, em or similar).\n   */\n  markDef?: M\n\n  /**\n   * The key of the mark definition (in the case of annotations).\n   * `undefined` if the mark is a decorator (strong, em or similar).\n   */\n  markKey?: string\n\n  /**\n   * Type of the mark. For annotations, this is the `_type` property of the value.\n   * For decorators, it will hold the name of the decorator (strong, em or similar).\n   */\n  markType: string\n\n  /**\n   * Child nodes of this span. Can be toolkit-specific text nodes, nested spans\n   * or any inline object type.\n   */\n  children: (\n    | ToolkitTextNode\n    | ToolkitNestedPortableTextSpan<PortableTextMarkDefinition>\n    | ArbitraryTypedObject\n  )[]\n}\n", "function getRandomKey() {\n    return Math.random().toFixed(5).split('.')[1];\n}\nfunction assertSpanKey(span) {\n    return {\n        _key: span._key || getRandomKey(),\n        ...span\n    };\n}\nexport default function assertBlockKey(block) {\n    return {\n        _key: block._key || getRandomKey(),\n        ...block,\n        ...(block._type === 'block' && Array.isArray(block.children)\n            ? {\n                children: block.children.map(assertSpanKey)\n            }\n            : {})\n    };\n}\n", null, null, null, null, null, null, "/* node_modules/@portabletext/svelte/dist/defaultComponents/UnknownType.svelte generated by Svelte v4.2.19 */\nimport {\n\tSvelteComponentDev,\n\tcreate_slot,\n\tdispatch_dev,\n\tget_all_dirty_from_scope,\n\tget_slot_changes,\n\tinit,\n\tsafe_not_equal,\n\ttransition_in,\n\ttransition_out,\n\tupdate_slot_base,\n\tvalidate_slots\n} from \"svelte/internal\";\n\nimport \"svelte/internal/disclose-version\";\nconst file = \"node_modules/@portabletext/svelte/dist/defaultComponents/UnknownType.svelte\";\n\nfunction create_fragment(ctx) {\n\tlet current;\n\tconst default_slot_template = /*#slots*/ ctx[1].default;\n\tconst default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);\n\n\tconst block = {\n\t\tc: function create() {\n\t\t\tif (default_slot) default_slot.c();\n\t\t},\n\t\tl: function claim(nodes) {\n\t\t\tif (default_slot) default_slot.l(nodes);\n\t\t},\n\t\tm: function mount(target, anchor) {\n\t\t\tif (default_slot) {\n\t\t\t\tdefault_slot.m(target, anchor);\n\t\t\t}\n\n\t\t\tcurrent = true;\n\t\t},\n\t\tp: function update(ctx, [dirty]) {\n\t\t\tif (default_slot) {\n\t\t\t\tif (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {\n\t\t\t\t\tupdate_slot_base(\n\t\t\t\t\t\tdefault_slot,\n\t\t\t\t\t\tdefault_slot_template,\n\t\t\t\t\t\tctx,\n\t\t\t\t\t\t/*$$scope*/ ctx[0],\n\t\t\t\t\t\t!current\n\t\t\t\t\t\t? get_all_dirty_from_scope(/*$$scope*/ ctx[0])\n\t\t\t\t\t\t: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),\n\t\t\t\t\t\tnull\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ti: function intro(local) {\n\t\t\tif (current) return;\n\t\t\ttransition_in(default_slot, local);\n\t\t\tcurrent = true;\n\t\t},\n\t\to: function outro(local) {\n\t\t\ttransition_out(default_slot, local);\n\t\t\tcurrent = false;\n\t\t},\n\t\td: function destroy(detaching) {\n\t\t\tif (default_slot) default_slot.d(detaching);\n\t\t}\n\t};\n\n\tdispatch_dev(\"SvelteRegisterBlock\", {\n\t\tblock,\n\t\tid: create_fragment.name,\n\t\ttype: \"component\",\n\t\tsource: \"\",\n\t\tctx\n\t});\n\n\treturn block;\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n\tlet { $$slots: slots = {}, $$scope } = $$props;\n\tvalidate_slots('UnknownType', slots, ['default']);\n\tconst writable_props = [];\n\n\tObject.keys($$props).forEach(key => {\n\t\tif (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<UnknownType> was created with unknown prop '${key}'`);\n\t});\n\n\t$$self.$$set = $$props => {\n\t\tif ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);\n\t};\n\n\treturn [$$scope, slots];\n}\n\nclass UnknownType extends SvelteComponentDev {\n\tconstructor(options) {\n\t\tsuper(options);\n\t\tinit(this, options, instance, create_fragment, safe_not_equal, {});\n\n\t\tdispatch_dev(\"SvelteRegisterComponent\", {\n\t\t\tcomponent: this,\n\t\t\ttagName: \"UnknownType\",\n\t\t\toptions,\n\t\t\tid: create_fragment.name\n\t\t});\n\t}\n}\n\nexport default UnknownType;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6IiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiVW5rbm93blR5cGUuc3ZlbHRlIl19", "import DefaultMark from './DefaultMark.svelte';\nimport DefaultLink from './DefaultLink.svelte';\nimport DefaultBlock from './DefaultBlock.svelte';\nimport DefaultList from './DefaultList.svelte';\nimport DefaultListItem from './DefaultListItem.svelte';\nimport DefaultHardBreak from './DefaultHardBreak.svelte';\nimport UnknownType from './UnknownType.svelte';\nconst defaultComponents = {\n    marks: {\n        'strike-through': DefaultMark,\n        code: DefaultMark,\n        em: DefaultMark,\n        strong: DefaultMark,\n        underline: DefaultMark,\n        link: DefaultLink\n    },\n    block: {\n        blockquote: DefaultBlock,\n        h1: DefaultBlock,\n        h2: DefaultBlock,\n        h3: DefaultBlock,\n        h4: DefaultBlock,\n        h5: DefaultBlock,\n        h6: DefaultBlock,\n        normal: DefaultBlock\n    },\n    list: {\n        bullet: DefaultList,\n        number: DefaultList\n    },\n    listItem: {\n        bullet: DefaultListItem,\n        number: DefaultListItem\n    },\n    types: {},\n    hardBreak: DefaultHardBreak,\n    unknownBlockStyle: DefaultBlock,\n    unknownList: DefaultList,\n    unknownListItem: DefaultListItem,\n    unknownMark: DefaultMark,\n    unknownType: UnknownType\n};\nexport default defaultComponents;\n", "export function mergeComponents(parent, overrides = {}) {\n    return {\n        ...parent,\n        ...overrides,\n        block: mergeDeeply(parent, overrides, 'block'),\n        list: mergeDeeply(parent, overrides, 'list'),\n        listItem: mergeDeeply(parent, overrides, 'listItem'),\n        marks: mergeDeeply(parent, overrides, 'marks'),\n        types: mergeDeeply(parent, overrides, 'types')\n    };\n}\n/**\n * As some components can be single functions, we can't simply spread them as objects\n */\nfunction mergeDeeply(parent, overrides, key) {\n    const override = overrides[key];\n    const parentVal = parent[key];\n    if (typeof override === 'function') {\n        return override;\n    }\n    if (override && typeof parentVal === 'function') {\n        return override;\n    }\n    if (override) {\n        return { ...parentVal, ...override };\n    }\n    return parentVal;\n}\n", null, null, null, null, null, null, null, "const getTemplate = (type, prop) => `Unknown ${type}, specify a component for it in the \\`components${prop ? '.' : ''}${prop}\\` prop`;\nexport const getWarningMessage = (type, nodeType) => {\n    switch (nodeType) {\n        case 'block':\n            return getTemplate(`block type \"${type}\"`, 'types');\n        case 'blockStyle':\n            return getTemplate(`block style \"${type}\"`, 'block');\n        case 'listItemStyle':\n            return getTemplate(`list item style \"${type}\"`, 'listItem');\n        case 'listStyle':\n            return getTemplate(`list style \"${type}\"`, 'list');\n        case 'mark':\n            return getTemplate(`mark type \"${type}\"`, 'marks');\n        default:\n            return getTemplate('type');\n    }\n};\nexport function printWarning(message) {\n    console.warn(message);\n}\n", null],
  "mappings": "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",
  "names": ["isPortableTextSpan", "node", "_type", "text", "marks", "Array", "isArray", "every", "mark", "isPortableTextBlock", "markDefs", "def", "_key", "children", "child", "isPortableTextListItemBlock", "block", "listItem", "level", "isPortableTextToolkitList", "isPortableTextToolkitSpan", "span", "isPortableTextToolkitTextNode", "knownDecorators", "sortMarksByOccurences", "index", "blockChildren", "length", "slice", "occurences", "forEach", "siblingIndex", "sibling", "indexOf", "sort", "markA", "markB", "sortMarks", "aOccurences", "bOccurences", "aKnownPos", "bKnownPos", "localeCompare", "buildMarksTree", "_a", "sortedMarks", "map", "rootNode", "markType", "nodeStack", "i", "marksNeeded", "pos", "markKey", "splice", "currentNode", "markDef", "find", "push", "lines", "split", "line", "concat", "nestLists", "blocks", "mode", "tree", "currentList", "listFromBlock", "blockMatchesList", "newList", "lastListItem", "newLastChild", "_objectSpread", "matchingBranch", "match", "findListMatching", "console", "warn", "list", "matching", "style", "filterOnType", "spanToPlainText", "current", "leadingSpace", "trailingSpace", "toPlainText", "pad", "test", "LIST_NEST_MODE_HTML", "ctx", "ctx", "ctx", "ctx", "create_fragment", "ctx", "instance", "$$props", "ctx", "ctx", "ctx", "ctx", "ctx", "ctx", "text", "ctx", "ctx"]
}
